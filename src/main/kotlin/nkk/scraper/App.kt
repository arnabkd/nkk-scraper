/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package nkk.scraper

import org.jsoup.Jsoup
import org.jsoup.select.Elements
import kotlin.IllegalArgumentException

const val goldenURL = "https://retrieverklubben.no/golden-retriever/oppdretterliste/"

// CSS selectors
val containerSelector = {it: Int -> "div:nth-child($it)"}
fun getGetFylke(it: Elements): Fylke? {
  val content = it.select("h5").first()
  return when (content) {
    null -> null
    else -> Fylke.values().first { it.fullName == content.text() }
  }
}


fun createBreederTable(url: String) {
  val doc = Jsoup
    .connect(url)
    .get()
    .select("body > div.main_container > div")
    .map {
      it.children()
    }
    .first()


  val relevantList = doc.mapIndexed {i, it ->
    val fylkeIndex = i + 2
    val fylkeHTML = doc.select(containerSelector(fylkeIndex))

    // For each fylke
    val fylkeName = getGetFylke(fylkeHTML)
    val breeders = fylkeHTML.select("div.row.oppdretterliste_box")

    fylkeName to breeders
  }.filterNot {(fylke, _) -> fylke == null }
  println(relevantList)
}

data class Breeder(
  val fylke: String? = null,
  val name: String? = null,
  val kennelName: String? = null,
  val address: String? = null,
  val phone: String? = null,
  val email: String? = null,
  val url: String? = null
)

enum class Fylke(val fullName: String) {
  AGDER("Agder"),
  INNLANDET("Innlandet"),
  MORE_OG_ROMSDAL("Møre og Romsdal"),
  NORDLAND("Nordland"),
  OSLO("Oslo"),
  ROGALAND("Rogaland"),
  TROMS_OG_FINNMARK("Troms og Finmark"),
  TRONDELAG("Trøndelag"),
  VESTFOLD_OG_TELEMARK("Vestfold og Telemark"),
  VESTLAND("Vestland"),
  VIKEN("Viken")
}

fun main() {
  createBreederTable(goldenURL)
}
